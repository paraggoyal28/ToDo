[{"C:\\Users\\Parag\\Documents\\ToDo\\src\\App.js":"1","C:\\Users\\Parag\\Documents\\ToDo\\src\\components\\Item\\index.jsx":"2"},{"size":8512,"mtime":1610192161359,"results":"3","hashOfConfig":"4"},{"size":3444,"mtime":1610190324367,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1v7xpaw",{"filePath":"9","messages":"10","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Parag\\Documents\\ToDo\\src\\App.js",["11","12","13","14","15","16"],"import React, { Fragment } from 'react';\r\nimport './App.css';\r\nimport Item from './components/Item';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      idCount: 1, // count of the items\r\n      textValue: '', // value of the input item.\r\n      itemList: [], // original list of items\r\n      filteredList: [], // search filtered list of items\r\n      searchValue: '', // value of the search text field\r\n      markedItemCount: 0, // items which are marked \r\n      unmarkedItemCount: 0, // items which are not marked.\r\n      deletedItemCount: 0 // items which are deleted.\r\n    }\r\n  }\r\n\r\n\r\n  handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') { // on pressing enter key we are submitting the response\r\n      // declaring an item\r\n      const item = {\r\n        id: this.state.idCount,\r\n        marked: false, // initially every item is unmarked,\r\n        createdAt: new Date().toLocaleString(),\r\n        lastUpdatedAt: new Date().toLocaleString(),\r\n        deleted: false,\r\n        text: e.target.value,\r\n        description: \"\",\r\n      }\r\n      this.setState({\r\n        itemList: [...this.state.itemList, item], idCount: this.state.idCount + 1,\r\n        textValue: '', unmarkedItemCount: this.state.unmarkedItemCount + 1\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTextChange = (e) => {\r\n    // changing the text value of the item input box to be the value entered.\r\n    this.setState({ textValue: e.target.value });\r\n  }\r\n\r\n\r\n  handleMarkingAll = (e) => {\r\n    // if the mark all checkbox is checked then unmark all the checkboxes, and \r\n    // if the mark all checkbox is unchecked then mark all the checkboxes.\r\n    const checkState = this.state.markedItemCount === this.state.itemList.length - this.state.deletedItemCount;\r\n    const itemList = this.state.itemList.map(item => {\r\n      item.marked = checkState === true ? false : true;\r\n      return item;\r\n    });\r\n    // count the delete items so that they are not counted in marked and unmarked.\r\n    const deletedItemCount = itemList.filter(item => item.deleted).length;\r\n    const markedItemCount = itemList.filter(item => item.marked && !item.deleted).length;\r\n    const unmarkedItemCount = itemList.length - markedItemCount - deletedItemCount;\r\n    this.setState({ itemList, markedItemCount, unmarkedItemCount, deletedItemCount });\r\n  }\r\n\r\n  handleDelete = (e) => {\r\n    // handle Delete of a single item\r\n    const id = e.target.dataset.num;\r\n    const itemList = this.state.itemList.map(item => {\r\n      if (parseInt(item.id) === parseInt(id)) {\r\n        item.deleted = true;\r\n      }\r\n      return item;\r\n    });\r\n\r\n    this.setState({\r\n      itemList,\r\n      markedItemCount: this.state.markedItemCount - 1,\r\n      deletedItemCount: this.state.deletedItemCount - 1,\r\n    });\r\n\r\n  }\r\n\r\n  handleDeleteMarked = (e) => {\r\n    // handle delete of all items that are marked.\r\n    let markedDeleteCount = 0;\r\n    const itemList = this.state.itemList.map(item => {\r\n      if (item.marked && !item.deleted) {\r\n        markedDeleteCount++;\r\n        item.deleted = true;\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({\r\n      itemList,\r\n      markedItemCount: this.state.markedItemCount - markedDeleteCount,\r\n      deletedItemCount: this.state.deletedItemCount + markedDeleteCount\r\n    });\r\n  }\r\n\r\n  handleDescriptionChange = (e) => {\r\n    // change the description of the item.\r\n    const id = parseInt(e.target.dataset.num);\r\n    const itemList = this.state.itemList.map(item => {\r\n      if (parseInt(item.id) === id) {\r\n        item.description = e.target.value;\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({ itemList });\r\n  }\r\n\r\n  handleSearch = (e) => {\r\n    // searching for a specific or list of items.\r\n    const value = e.target.value;\r\n    let filteredList = this.state.itemList;\r\n    if (value.length >= 3) {\r\n      filteredList = this.state.itemList.filter(item => (item.text &&\r\n        item.text.toLowerCase().includes(value.toLowerCase())) ||\r\n        (item.description && item.description.toLowerCase().includes(value.toLowerCase())));\r\n    }\r\n    this.setState({ filteredList, searchValue: value });\r\n  }\r\n\r\n  handleKeyPressDescription = (e) => {\r\n    // on pressing enter when the description is finished.\r\n    if (e.key === 'Enter') {\r\n      const descriptionBox = document.getElementById('descriptionInput' + e.target.dataset.num);\r\n      const descriptionText = document.getElementById('description' + e.target.dataset.num);\r\n      const id = parseInt(e.target.dataset.num);\r\n      const itemList = this.state.itemList.map(item => {\r\n        const words = item.description && item.description.slice(0, 140).split(' ') || [];\r\n        const description = words && words.length && words.map(word => word.slice(0, 30)).join(' ') || '';\r\n        if (parseInt(item.id) === id) {\r\n          item.description = description;\r\n          item.lastUpdatedAt = new Date().toLocaleString();\r\n        }\r\n        return item;\r\n      });\r\n      descriptionBox.style.display = 'none';\r\n      descriptionText.style.display = 'inline-block';\r\n      this.setState({ itemList });\r\n    }\r\n  }\r\n\r\n  handleChangeSingle = (e) => {\r\n    // handle checking and unchecking of a single item.\r\n    const id = parseInt(e.target.dataset.num);\r\n    const itemList = this.state.itemList.map(item => {\r\n      if (parseInt(item.id) === id) {\r\n        item.marked = !item.marked;\r\n      }\r\n      return item;\r\n    });\r\n    const deletedItemCount = itemList.filter(item => item.deleted).length;\r\n    const markedItemCount = itemList.filter(item => item.marked && !item.deleted).length;\r\n    const unmarkedItemCount = itemList.length - markedItemCount - deletedItemCount;\r\n    this.setState({ itemList, markedItemCount, unmarkedItemCount, deletedItemCount });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { textValue, searchValue, filteredList, unmarkedItemCount, markedItemCount, itemList, deletedItemCount } =\r\n      this.state;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"todoapp\">\r\n          <h1 className=\"heading\">TODOS</h1>\r\n          <input id=\"new-todo\" type=\"text\" value={textValue} onKeyPress={this.handleKeyPress} onChange={this.handleTextChange} placeholder=\"What needs to be done?\" />\r\n          {(unmarkedItemCount > 0 || markedItemCount > 0) &&\r\n            (\r\n              <Fragment>\r\n                <input id=\"toggle-all\" type=\"checkbox\"\r\n                  checked={markedItemCount === itemList.length - deletedItemCount}\r\n                  onChange={this.handleMarkingAll} />\r\n                <label htmlFor=\"toggle-all\" >Mark all as complete</label>\r\n                <input id=\"search-todo\" type=\"text\" value={searchValue} onChange={this.handleSearch} placeholder=\"What you want to search?\" />\r\n\r\n                {searchValue && searchValue.length >= 3 && filteredList.length >= 1 && filteredList.map(item =>\r\n                  !item.deleted && (<Item key={item.id} item={item} handleDelete={this.handleDelete}\r\n                    handleChangeSingle={this.handleChangeSingle}\r\n                    handleKeyPress={this.handleKeyPressDescription}\r\n                    handleDescriptionChange={this.handleDescriptionChange} />)\r\n                )}\r\n\r\n\r\n                {(!searchValue || searchValue.length < 3) && itemList.length >= 1 && itemList.map(item =>\r\n                  !item.deleted && (<Item key={item.id} item={item} handleDelete={this.handleDelete}\r\n                    handleChangeSingle={this.handleChangeSingle}\r\n                    handleKeyPress={this.handleKeyPressDescription}\r\n                    handleDescriptionChange={this.handleDescriptionChange} />)\r\n                )}\r\n\r\n                <div className=\"footer\">\r\n                  <span><b>{unmarkedItemCount}</b> items left </span>\r\n                  {markedItemCount > 0 && <a id=\"clear-completed\" onClick={this.handleDeleteMarked}>Clear {markedItemCount} completed items</a>}\r\n                </div>\r\n\r\n              </Fragment>)}\r\n        </div>\r\n\r\n        {this.state.deletedItemCount > 0 && (<div className=\"history\">\r\n          <h1>Completed Items:</h1>\r\n          {itemList.map(item => {\r\n            if (item.deleted) {\r\n              return (\r\n                <div className=\"history-item\">\r\n                  <h2>{item.text}</h2>\r\n                  <p>{item.description}</p>\r\n                  <span>{item.createdAt}</span><span>{item.lastUpdatedAt}</span>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>)}\r\n      </Fragment>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default App;","C:\\Users\\Parag\\Documents\\ToDo\\src\\components\\Item\\index.jsx",["17","18","19","20","21","22"],{"ruleId":"23","severity":1,"message":"24","line":127,"column":40,"nodeType":"25","messageId":"26","endLine":127,"endColumn":42},{"ruleId":"23","severity":1,"message":"24","line":127,"column":85,"nodeType":"25","messageId":"26","endLine":127,"endColumn":87},{"ruleId":"23","severity":1,"message":"24","line":128,"column":51,"nodeType":"25","messageId":"26","endLine":128,"endColumn":53},{"ruleId":"23","severity":1,"message":"24","line":128,"column":101,"nodeType":"25","messageId":"26","endLine":128,"endColumn":103},{"ruleId":"27","severity":1,"message":"28","line":191,"column":43,"nodeType":"29","endLine":191,"endColumn":101},{"ruleId":"30","severity":1,"message":"31","line":199,"column":30,"nodeType":"32","messageId":"33","endLine":199,"endColumn":32},{"ruleId":"34","severity":1,"message":"35","line":5,"column":5,"nodeType":"36","messageId":"37","endLine":7,"endColumn":6},{"ruleId":"38","severity":1,"message":"39","line":45,"column":55,"nodeType":"40","messageId":"41","endLine":45,"endColumn":62},{"ruleId":"42","severity":1,"message":"43","line":54,"column":25,"nodeType":"29","endLine":54,"endColumn":110},{"ruleId":"27","severity":1,"message":"28","line":54,"column":25,"nodeType":"29","endLine":54,"endColumn":110},{"ruleId":"42","severity":1,"message":"43","line":55,"column":36,"nodeType":"29","endLine":55,"endColumn":125},{"ruleId":"27","severity":1,"message":"28","line":55,"column":36,"nodeType":"29","endLine":55,"endColumn":125},"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'deleted' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader."]